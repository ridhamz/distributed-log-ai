{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Distributed Log AI Infrastructure with VPC, ALB, AutoScaling, SQS, SNS, DynamoDB",
  "Parameters": {
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t3.micro",
      "AllowedValues": ["t2.micro", "t3.micro", "t3.small", "t3.medium"],
      "Description": "Choose an EC2 instance type for the Log Ingestion API/Worker."
    },
    "GitRepo": {
      "Type": "String",
      "Default": "https://github.com/ridhamz/distributed-log-ai.git",
      "Description": "The Git repository URL for the application code."
    },
    "GitBranch": {
      "Type": "String",
      "Default": "main",
      "Description": "The branch of the Git repository to clone."
    },
    "ClaudeApiKey": {
      "Type": "String",
      "NoEcho": true,
      "Description": "Claude AI API Key for anomaly detection (Worker Service)."
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-0c94855ba95c71c99"
      },
      "us-west-2": {
        "AMI": "ami-0abcdef1234567890"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "DistributedLogVPC"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "DistributedLogIGW"
          }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Select": [
            "0",
            {
              "GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet1"
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Select": [
            "1",
            {
              "GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnet2"
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "SubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet2"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP inbound to ALB",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow HTTP from ALB and SSH",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "SourceSecurityGroupId": {
              "Ref": "ALBSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "DistributedLogALB",
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ALBSecurityGroup"
          }
        ]
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Port": 80,
        "Protocol": "HTTP",
        "TargetType": "instance",
        "HealthCheckPath": "/health",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 2
      }
    },
    "Listener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        ],
        "Policies": [
          {
            "PolicyName": "SSMGetParameter",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["ssm:GetParameter"],
                  "Resource": {
                    "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/distributed-log-ai/claude-api-key"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "SSMParameterClaudeKey": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/distributed-log-ai/claude-api-key",
        "Type": "SecureString",
        "Value": {
          "Ref": "ClaudeApiKey"
        },
        "Description": "Claude AI API Key for secure access by the worker service."
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": ["InstanceProfile", "Arn"]
            }
          },
          "ImageId": {
            "Fn::FindInMap": [
              "RegionMap",
              {
                "Ref": "AWS::Region"
              },
              "AMI"
            ]
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "KeyName": {
            "Ref": "KeyName"
          },
          "SecurityGroupIds": [
            {
              "Ref": "InstanceSecurityGroup"
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Sub": "#!/bin/bash\nyum update -y\n# Install Node.js 18 and git\ncurl -sL https://rpm.nodesource.com/setup_18.x | bash -\nyum install -y nodejs git awscli\n\n# Install PM2 globally\nnpm install -g pm2\n\n# Clone and setup the app\ncd /home/ec2-user\ngit clone -b ${GitBranch} ${GitRepo} app\ncd app\nnpm install\n\n# Get the Claude API Key securely from SSM Parameter Store\nCLAUDE_API_KEY=$(aws ssm get-parameter --name /distributed-log-ai/claude-api-key --with-decryption --query Parameter.Value --output text --region ${AWS::Region})\n\n# Create a simple .env file for the application\necho \"CLAUDE_API_KEY=$CLAUDE_API_KEY\" > .env\n\n# Start the application with pm2\npm2 start src/index.js --name distributed-log-ai\n\n# Enable PM2 to start on boot and save the process list\npm2 startup systemd\npm2 save\n"
            }
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ],
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "LaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": ["LaunchTemplate", "LatestVersionNumber"]
          }
        },
        "MinSize": "1",
        "MaxSize": "4",
        "DesiredCapacity": "1",
        "TargetGroupARNs": [
          {
            "Ref": "TargetGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "LogIngestionInstance",
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "DistributedLogs",
        "AttributeDefinitions": [
          {
            "AttributeName": "LogID",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "LogID",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "Tags": [
          {
            "Key": "Name",
            "Value": "DistributedLogsTable"
          }
        ]
      }
    },
    "SQSQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "DistributedLogQueue",
        "Tags": [
          {
            "Key": "Name",
            "Value": "DistributedLogQueue"
          }
        ]
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "DistributedLogTopic",
        "Tags": [
          {
            "Key": "Name",
            "Value": "DistributedLogTopic"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ALBDNSName": {
      "Value": {
        "Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]
      },
      "Description": "DNS name of the Application Load Balancer"
    },
    "SQSQueueURL": {
      "Value": {
        "Ref": "SQSQueue"
      },
      "Description": "URL of the SQS Queue"
    },
    "SNSTopicARN": {
      "Value": {
        "Ref": "SNSTopic"
      },
      "Description": "ARN of the SNS Topic"
    }
  }
}
